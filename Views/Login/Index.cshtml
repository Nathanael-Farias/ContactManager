@model LoginModel
@{
    Layout = "_LayoutUnlogged";
    ViewData["Title"] = "Login";
    
}
<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card shadow">
                <div class="card-body">
                    <h3 class="card-title text-center mb-4">Login</h3>
                    <form id="login-form" asp-controller="Login" asp-action="Enter" method="post">
                        <div class="mb-3">
                            <label for="Login" class="form-label">Login</label>
                            <input asp-for="Login" type="text" class="form-control" id="username" name="Login" placeholder="Enter your username" required>
                            @Html.ValidationMessageFor(x => x.Login, "", new { @class = "text-danger" })
                        </div>
                        <div class="mb-3 position-relative">
                            <label for="Password" class="form-label">Password</label>
                            @Html.ValidationMessageFor(x => x.Password, "", new { @class = "text-danger" })
                            <input asp-for="Password" type="password" class="form-control" id="password" name="Password" placeholder="Enter your password" required>
                            <input type="checkbox" id="showPassword" onclick="togglePassword()"> Show Password
                        </div>
                        <button type="button" class="btn btn-primary w-100" id="login-button">Log In</button>
                        @if (TempData.ContainsKey("ErrorMessage"))
                        {
                            <div class="alert alert-danger mt-3" role="alert">
                                @TempData["ErrorMessage"]
                            </div>
                        }
                        <a href="#" class="btn btn-link w-100 mt-3" onclick="confirmResetPassword()">Reset my password</a>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
    document.getElementById('login-button').addEventListener('click', function (e) {
        e.preventDefault();
        const form = document.getElementById('login-form');
        const username = document.getElementById('username').value;
        const password = document.getElementById('password').value;

        if (!username || !password) {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'Please fill in all fields!',
                confirmButtonText: 'OK'
            });
            return;
        }

        form.submit();
    });
    if (TempData.ContainsKey("ErrorMessage")) {
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: TempData["ErrorMessage"],
            confirmButtonText: 'OK'
        });
    }
    function togglePassword() {
        var passwordField = document.getElementById("password");
        var showPasswordCheckbox = document.getElementById("showPassword");
        if (showPasswordCheckbox.checked) {
            passwordField.type = "text";
        } else {
            passwordField.type = "password";
        }
    }
    function confirmResetPassword() {
        Swal.fire({
            title: 'Are you sure?',
            text: "This will redirect you to the reset password page.",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonText: 'Yes',
            cancelButtonText: 'Cancel',
            reverseButtons: true
        }).then((result) => {
            if (result.isConfirmed) {
                window.location.href = "@Url.Action("ResetPassword", "Login")";
            }
        });
    }
</script>
